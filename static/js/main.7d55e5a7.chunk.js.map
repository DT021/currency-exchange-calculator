{"version":3,"sources":["Componants/Exchange.js","Componants/Update.js","Componants/ExList.js","App.js","serviceWorker.js","index.js"],"names":["Exchange","props","useState","fromCoin","setFromCoin","toCoin","setToCoin","amount","setAmount","coinListSelect","coinList","map","e","index","key","value","name","className","id","onChange","target","type","Button","variant","disabled","onClick","from","to","num","coinVal","coin","length","val","result","pushExList","alert","makeExchange","href","setTheFlag","Update","newType","setNewType","newVal","setNewVal","placeholder","document","getElementById","setTheNewType","isNaN","setTheNewVal","updateCoinList","ExList","exList","removeExList","App","setCoinList","setExList","flag","setFlag","obj","filter","element","i","coinExsit","exact","path","component","showExList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7d55e5a7.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from 'react-bootstrap';\r\n\r\n\r\n\r\nexport default function Exchange(props) {\r\n\r\n    const [fromCoin, setFromCoin] = useState('');\r\n    const [toCoin, setToCoin] = useState('');\r\n    const [amount, setAmount] = useState('');\r\n\r\n\r\n    const coinListSelect = () => {// dropdown list of coins\r\n        return props.coinList.map((e,index) => { return <option key={index} value={e.name}>{e.name}</option> })\r\n    }\r\n\r\n    let makeExchange = (from, to, num) => {\r\n        let coinVal = (coin) => {\r\n            for (let index = 0; index < props.coinList.length; index++) {\r\n                if (props.coinList[index].name === coin) {\r\n                    return props.coinList[index].val\r\n                }\r\n            }\r\n        }\r\n        let fromCoinVal = coinVal(from)\r\n        let toCoinVal = coinVal(to)\r\n        let result = fromCoinVal / toCoinVal * num\r\n\r\n        props.pushExList({ from: from, to: to, amount: num, result: result });\r\n        alert(result);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"headTitle\">Exchange App</h1>\r\n            <br/>\r\n            <p className=\"headTitle\">from:</p>\r\n            <select name=\"fromCoin\" id=\"fromCoin\" onChange={(e) => { setFromCoin(e.target.value) }}>\r\n                <option value=\"\">Select Currency</option>\r\n                {coinListSelect()}\r\n            </select>\r\n            <input type=\"number\" id=\"startExBtn\" onChange={(e) => { setAmount(e.target.value) }} />\r\n            <br />\r\n            <p className=\"headTitle\">to:</p>\r\n            <select name=\"toCoin\" id=\"toCoin\" onChange={(e) => { setToCoin(e.target.value) }}>\r\n                <option value=\"\">Select Currency</option>\r\n                {coinListSelect()}\r\n            </select>\r\n            <br />\r\n            <br />\r\n            <Button variant=\"success\" disabled={(fromCoin === '' || toCoin === '') ? true : false} onClick={() => { makeExchange(fromCoin, toCoin, amount) }} ><h3>=</h3></Button>\r\n            <br />\r\n            <br />\r\n\r\n            <Link to={'/update'}><Button variant=\"warning\">Update</Button>{' '}</Link>\r\n            <a href=\"http://www.facebook.com\"><Button variant=\"primary\">Share on FaceBook</Button>{' '}</a>\r\n            <Button variant=\"warning\" onClick={() => { props.setTheFlag() }}>View Your Exchange List</Button>{' '}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Update(props) {\r\n\r\n    const [newType, setNewType] = useState('');\r\n    const [newVal, setNewVal] = useState('')\r\n\r\n\r\n    const coinListTable = () => {\r\n        return (\r\n            props.coinList.map((e) => {\r\n                return (\r\n                    \r\n                    <tr >\r\n                        <td>{e.name}</td>\r\n                        \r\n                        <td>{e.val}</td>\r\n                    </tr>\r\n                )\r\n            })\r\n        )\r\n    }\r\n\r\n    const setTheNewVal = (e) => {\r\n        if (isNaN(e)) {\r\n            alert('not a number')\r\n            document.getElementById(\"valInp\").value='';\r\n        }\r\n        else {\r\n\r\n            setNewVal(e)\r\n        }\r\n\r\n    }\r\n\r\n    const setTheNewType = (e)=>{\r\n        if ((e>='a' && e<='z') || (e>='A' && e<='Z')) {\r\n            \r\n            setNewType(e)\r\n        }\r\n        else {\r\n            alert('Latters Only!')\r\n            document.getElementById(\"typInp\").value='';\r\n        }\r\n    }\r\n\r\n\r\n\r\n//----------------------------------------------------\r\n    return (\r\n        <div className=\"App\">\r\n            <h1 className=\"headTitle\">Update</h1>\r\n            <table className=\"excListDiv\">\r\n                <tr>\r\n                    <th>Type</th>\r\n                    <th>Value</th>\r\n                </tr>\r\n                {coinListTable()}\r\n            </table>\r\n\r\n            <br />\r\n            <h4 className=\"headTitle\">Coin Type</h4>\r\n            <br />\r\n            <input id=\"typInp\" type=\"text\" placeholder=\"enter type\" onChange={(e) => { setTheNewType(e.target.value) }} />\r\n            <h4 className=\"headTitle\">New Value</h4>\r\n            <input id=\"valInp\" type=\"text\" placeholder=\"enter value\" onChange={(e) => { setTheNewVal(e.target.value) }} />\r\n            <br />\r\n            <br />\r\n            <Link to={'/'}> <button>Back</button></Link>\r\n            <button onClick={() => { return props.updateCoinList(newType, newVal) }}>Update</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function ExList(props) {\r\n    return (\r\n        <div className=\"excListDiv\">\r\n            <h3>#{props.index + 1}</h3>\r\n            <h3>from {props.exList.from} to {props.exList.to}</h3>\r\n            <h3>{props.exList.amount} = {props.exList.result}</h3>\r\n            <button onClick={() => { props.removeExList(props.index) }}>X</button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Exchange from './Componants/Exchange'\nimport Update from './Componants/Update'\nimport ExList from './Componants/ExList'\n\n\n\nfunction App() {\n\n  const [coinList, setCoinList] = useState([{ name: 'dollar', val: 3.43 }, { name: 'euro', val: 3.92 }, { name: 'shekel', val: 1 }]);\n  const [exList, setExList] = useState([]);\n  const [flag, setFlag] = useState(false);\n  const [nameFlag, setNameFlag] = useState(false);\n  const [coinIndex, setCoinIndex] = useState('');\n\n  const pushExList = (obj) => {\n    setExList([...exList, obj])\n  }\n\n  const removeExList = (index) => {\n    setExList(exList.filter((element, i) => (i !== index)));\n  }\n\n  const showExList = () => {\n    if (flag === true) {\n      return (\n        exList.map((e, index) => { return <ExList exList={exList[index]} index={index} removeExList={removeExList} /> })\n      )\n    }\n  }\n\n  const setTheFlag = () => {\n    setFlag(!flag)\n  }\n\n  const coinExsit = (name) => {\n    for (let i = 0; i < coinList.length; i++) {\n      if (coinList[i].name === name) {\n        return i\n        break\n      }\n    }\n  }\n\n  const updateCoinList = (name, val) => {\n    let index=coinExsit(name)\n    if (!isNaN(index)) {\n      coinList[index].val=val\n      setCoinList([...coinList])\n    }\n    else{\n      setCoinList([...coinList, { name: name, val: val }])\n    }\n  }\n\n\n  //-----------------------------------------------------------------------------------\n  return (\n    <div className=\"App\">\n\n      <Router>\n        <Switch>\n          <Route exact path={'/'} component={() => { return <Exchange coinList={coinList} pushExList={pushExList} setTheFlag={setTheFlag} /> }} />\n          <Route exact path={'/update'} component={() => { return <Update coinList={coinList} updateCoinList={updateCoinList} /> }} />\n\n          <br />\n\n        </Switch>\n      </Router>\n      <br/>\n      {showExList()}\n    </div>\n    \n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}